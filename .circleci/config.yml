# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2

defaults: &defaults
    working_directory: ~/repo
    docker:
       - image: gcr.io/memoq-backend/ruby-gcloud:v7
         auth:
           username: _json_key
           password: $GOOGLE_AUTH
         env:
           - RAILS_ENV=test
           - PROJECT_NAME=memoq-backend
       - image: mysql:5.7.22
         env:
           - MYSQL_ALLOW_EMPTY_PASSWORD=true
           - MYSQL_ROOT_HOST=127.0.0.1

references:
  - restore_code: &restore_code
      restore_cache:
        key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
  - restore_dependencies: &restore_dependencies
      restore_cache:
        keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          - v1-dependencies-
  - bundle_path: &bundle_path
      run: bundle --path vendor/bundle

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ./

  build_dependencies:
    <<: *defaults

    steps:
      - *restore_code
      - *restore_dependencies

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
        
      # Database setup
   #   - run: bundle exec rake db:create
   #   - run: bundle exec rake db:schema:load
  test:         
    <<: *defaults

    steps:
      - *restore_code
      - *restore_dependencies
      - *bundle_path
      - run:
          name: setup db
          # Execute `db:create` several times to workaround mysql connection error: Can't connect to MySQL server on '127.0.0.1' (111 "Connection refused")
          command: |
            for i in {1..15}; do bundle exec rails db:create && sleep 1 || true; done
            bundle exec rake db:apply
      - run:
          name: rspec
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob 'spec/**/*_spec.rb' | circleci tests split --split-by=timings)"
            
            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress \
                            $TEST_FILES
      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  lint:
    <<: *defaults
    steps:
      - *restore_code
      - *restore_dependencies
      - *bundle_path
      - run: bundle exec rubocop

  build_and_push_image:
    <<: *defaults
    steps:
      - *restore_code
      - run:
          name: setup gcloud and helm
          command: |
            echo $GOOGLE_AUTH > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $PROJECT_NAME
            gcloud container clusters get-credentials resources-v1-my-cluster --zone asia-northeast1-c
            helm init --client-only
            helm repo update
      - run:
          name: update builder
          command: |
            gcloud builds submit --config .circleci/cloud_builder_build.yml .
      - run:
          name: build image
          command: |
            gcloud builds submit --config cloudbuild.yml .

      - run:
          name: tag and deploy
          command: |
            image_name=gcr.io/memoq-backend/rails
            tag="$(date '+%Y-%m-%d-%H-%M')"
            gcloud container images add-tag gcr.io/memoq-backend/rails:latest "${image_name}:${tag}" --quiet
            helm upgrade --install backend chart --set image.db_user=root --set image.db_password=$DB_PASSWORD --set image.tag=$tag

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - checkout_code
      - build_dependencies:
          requires:
            - checkout_code
      - test:
          requires:
            - build_dependencies
      - lint:
          requires:
            - build_dependencies
      - hold_build_and_push_image:
          type: approval
          requires:
            - lint
            - test
      - build_and_push_image:
          requires:
            - hold_build_and_push_image
